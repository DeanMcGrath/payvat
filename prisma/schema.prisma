generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Existing system table - do not modify
model tenants {
  id         String    @id @default(dbgenerated("public.uuid_generate_v7()")) @db.Uuid
  name       String?
  created    DateTime  @default(dbgenerated("LOCALTIMESTAMP")) @db.Timestamp(6)
  updated    DateTime  @default(dbgenerated("LOCALTIMESTAMP")) @db.Timestamp(6)
  deleted    DateTime? @db.Timestamp(6)
  compute_id String?   @db.Uuid
}

model User {
  id                   String      @id @default(cuid())
  email                String      @unique
  password             String
  role                 String      @default("USER")
  businessName         String
  vatNumber            String      @unique
  firstName            String?
  lastName             String?
  phone                String?
  address              String?
  emailVerified        DateTime?
  lastLoginAt          DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  auditLogs            AuditLog[]
  documents            Document[]
  payments             Payment[]
  vatReturns           VATReturn[]
  chatSessions         ChatSession[]

  @@map("vat_users")
}

model VATReturn {
  id               String     @id @default(cuid())
  userId           String
  periodStart      DateTime
  periodEnd        DateTime
  dueDate          DateTime
  salesVAT         Decimal
  purchaseVAT      Decimal
  netVAT           Decimal
  status           String     @default("DRAFT")
  submittedAt      DateTime?
  paidAt           DateTime?
  revenueRefNumber String?
  revenueResponse  Json?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  documents        Document[]
  payment          Payment?
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vat_returns")
}

model Document {
  id           String     @id @default(cuid())
  userId       String
  vatReturnId  String?
  fileName     String
  originalName String
  filePath     String?
  fileSize     Int
  mimeType     String
  fileHash     String
  documentType String
  category     String
  isScanned    Boolean    @default(false)
  scanResult   String?
  uploadedAt   DateTime   @default(now())
  fileData     String?
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  vatReturn    VATReturn? @relation(fields: [vatReturnId], references: [id])

  @@map("vat_documents")
}

model Payment {
  id                 String    @id @default(cuid())
  userId             String
  vatReturnId        String    @unique
  amount             Decimal
  currency           String    @default("EUR")
  status             String    @default("PENDING")
  paymentMethod      String?
  stripePaymentId    String?
  stripeClientSecret String?
  processedAt        DateTime?
  failedAt           DateTime?
  failureReason      String?
  receiptNumber      String?   @unique
  receiptUrl         String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vatReturn          VATReturn @relation(fields: [vatReturnId], references: [id], onDelete: Cascade)

  @@map("vat_payments")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  entityType String?
  entityId   String?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  oldValues  Json?
  newValues  Json?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@map("vat_audit_logs")
}

model ChatSession {
  id              String        @id @default(cuid())
  userId          String?       // Optional - for anonymous users
  sessionId       String        @unique // Anonymous session identifier
  
  // Session Information
  isActive        Boolean       @default(true)
  isResolved      Boolean       @default(false)
  resolvedAt      DateTime?
  resolvedBy      String?       // Admin user ID who resolved
  
  // User Information (for anonymous users)
  userEmail       String?
  userName        String?
  userCompany     String?
  
  // Session Context
  ipAddress       String?
  userAgent       String?
  referrerUrl     String?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  lastMessageAt   DateTime      @default(now())
  
  // Relations
  user            User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  messages        ChatMessage[]
  
  @@map("vat_chat_sessions")
}

model ChatMessage {
  id            String      @id @default(cuid())
  sessionId     String
  
  // Message Content
  message       String
  messageType   String      @default("text") // text, file, system
  
  // Sender Information
  senderType    String      // user, admin, system
  senderId      String?     // User ID or Admin ID
  senderName    String?     // Display name
  
  // Message Status
  isRead        Boolean     @default(false)
  readAt        DateTime?
  
  // File Attachment (optional)
  fileName      String?
  fileUrl       String?
  fileSize      Int?
  
  // Timestamps
  createdAt     DateTime    @default(now())
  
  // Relations
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("vat_chat_messages")
}
