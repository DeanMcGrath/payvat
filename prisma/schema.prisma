generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Existing system table - do not modify
model tenants {
  id         String    @id @default(dbgenerated("public.uuid_generate_v7()")) @db.Uuid
  name       String?
  created    DateTime  @default(dbgenerated("LOCALTIMESTAMP")) @db.Timestamp(6)
  updated    DateTime  @default(dbgenerated("LOCALTIMESTAMP")) @db.Timestamp(6)
  deleted    DateTime? @db.Timestamp(6)
  compute_id String?   @db.Uuid
}

model User {
  id                   String      @id @default(cuid())
  email                String      @unique
  password             String
  role                 String      @default("USER")
  businessName         String
  vatNumber            String?
  firstName            String?
  lastName             String?
  phone                String?
  address              String?
  emailVerified        DateTime?
  lastLoginAt          DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  auditLogs            AuditLog[]
  documents            Document[]
  payments             Payment[]
  vatReturns           VATReturn[]
  chatSessions         ChatSession[]
  videoAnalytics       VideoAnalytics[]

  @@map("vat_users")
}

model VATReturn {
  id               String     @id @default(cuid())
  userId           String
  periodStart      DateTime
  periodEnd        DateTime
  dueDate          DateTime
  salesVAT         Decimal
  purchaseVAT      Decimal
  netVAT           Decimal
  status           String     @default("DRAFT")
  submittedAt      DateTime?
  paidAt           DateTime?
  revenueRefNumber String?
  revenueResponse  Json?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  documents        Document[]
  payment          Payment?
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vat_returns")
}

model Document {
  id           String     @id @default(cuid())
  userId       String
  vatReturnId  String?
  fileName     String
  originalName String
  filePath     String?
  fileSize     Int
  mimeType     String
  fileHash     String
  documentType String
  category     String
  isScanned    Boolean    @default(false)
  scanResult   String?
  uploadedAt   DateTime   @default(now())
  fileData     String?
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  vatReturn    VATReturn? @relation(fields: [vatReturnId], references: [id])

  @@map("vat_documents")
}

model Payment {
  id                 String    @id @default(cuid())
  userId             String
  vatReturnId        String    @unique
  amount             Decimal
  currency           String    @default("EUR")
  status             String    @default("PENDING")
  paymentMethod      String?
  stripePaymentId    String?
  stripeClientSecret String?
  processedAt        DateTime?
  failedAt           DateTime?
  failureReason      String?
  receiptNumber      String?   @unique
  receiptUrl         String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vatReturn          VATReturn @relation(fields: [vatReturnId], references: [id], onDelete: Cascade)

  @@map("vat_payments")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  entityType String?
  entityId   String?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  oldValues  Json?
  newValues  Json?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@map("vat_audit_logs")
}

model ChatSession {
  id              String        @id @default(cuid())
  userId          String?       // Optional - for anonymous users
  sessionId       String        @unique // Anonymous session identifier
  
  // Session Information
  isActive        Boolean       @default(true)
  isResolved      Boolean       @default(false)
  resolvedAt      DateTime?
  resolvedBy      String?       // Admin user ID who resolved
  
  // User Information (for anonymous users)
  userEmail       String?
  userName        String?
  userCompany     String?
  
  // Session Context
  ipAddress       String?
  userAgent       String?
  referrerUrl     String?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  lastMessageAt   DateTime      @default(now())
  
  // Relations
  user            User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  messages        ChatMessage[]
  
  @@map("vat_chat_sessions")
}

model ChatMessage {
  id            String      @id @default(cuid())
  sessionId     String
  
  // Message Content
  message       String
  messageType   String      @default("text") // text, file, system
  
  // Sender Information
  senderType    String      // user, admin, system
  senderId      String?     // User ID or Admin ID
  senderName    String?     // Display name
  
  // Message Status
  isRead        Boolean     @default(false)
  readAt        DateTime?
  
  // File Attachment (enhanced)
  fileName      String?
  originalName  String?     // Original file name from user
  fileUrl       String?     // Secure file path
  fileSize      Int?        // File size in bytes
  mimeType      String?     // MIME type for validation
  fileHash      String?     // SHA256 hash for integrity
  filePreviewUrl String?    // Thumbnail/preview URL
  
  // File Security
  isScanned     Boolean     @default(false)
  scanResult    String?     // CLEAN, INFECTED, SUSPICIOUS, ERROR
  scanDetails   String?     // Additional scan information
  
  // File Management
  downloadCount Int         @default(0)
  expiresAt     DateTime?   // File expiration date
  isActive      Boolean     @default(true)
  
  // Timestamps
  createdAt     DateTime    @default(now())
  
  // Relations
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("vat_chat_messages")
}

model DemoVideo {
  id              String    @id @default(cuid())
  
  // Video Information
  title           String
  description     String?
  fileName        String
  originalName    String
  fileSize        Int       // Size in bytes
  mimeType        String
  duration        Int?      // Duration in seconds
  
  // File Storage
  videoUrl        String    // Main video file URL
  thumbnailUrl    String?   // Video thumbnail/preview image
  fileHash        String    // SHA256 hash for integrity
  
  // Video Quality Versions
  videoUrlHD      String?   // 1080p version
  videoUrlMD      String?   // 720p version  
  videoUrlSD      String?   // 480p version
  
  // Video Status
  status          String    @default("PROCESSING") // PROCESSING, READY, FAILED
  isActive        Boolean   @default(true)
  processingError String?   // Error message if processing failed
  
  // Video Metadata
  width           Int?      // Video width in pixels
  height          Int?      // Video height in pixels
  aspectRatio     String?   // e.g. "16:9", "4:3"
  bitrate         Int?      // Bitrate in kbps
  codec           String?   // Video codec information
  
  // Upload Information
  uploadedBy      String    // Admin user ID who uploaded
  uploadedAt      DateTime  @default(now())
  lastModified    DateTime  @updatedAt
  
  // Relations
  analytics       VideoAnalytics[]
  
  @@map("demo_videos")
}

model VideoAnalytics {
  id            String    @id @default(cuid())
  videoId       String
  
  // View Information
  sessionId     String?   // Anonymous session ID
  userId        String?   // Logged in user ID (optional)
  ipAddress     String?   // Hashed IP for privacy
  userAgent     String?   // Browser/device information
  
  // Geographic Data
  country       String?
  city          String?
  timezone      String?
  
  // Device Information  
  deviceType    String?   // mobile, desktop, tablet
  browserName   String?   // chrome, firefox, safari, etc.
  osName        String?   // windows, macos, ios, android
  screenSize    String?   // viewport dimensions
  
  // View Engagement
  playCount     Int       @default(1)
  watchDuration Int       @default(0) // Seconds watched
  completionRate Float    @default(0) // Percentage watched (0-100)
  
  // View Context
  referrerUrl   String?   // Where they came from
  pageUrl       String?   // Page where video was watched
  isFirstView   Boolean   @default(true)
  
  // Quality & Performance
  selectedQuality String? // HD, MD, SD
  bufferEvents   Int      @default(0) // Number of buffering events
  loadTime       Int?     // Time to start playing (ms)
  
  // Timestamps
  firstViewAt   DateTime  @default(now())
  lastViewAt    DateTime  @updatedAt
  
  // Relations
  video         DemoVideo @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("video_analytics")
}

