generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Existing system table - do not modify
model tenants {
  id         String    @id @default(dbgenerated("public.uuid_generate_v7()")) @db.Uuid
  name       String?
  created    DateTime  @default(dbgenerated("LOCALTIMESTAMP")) @db.Timestamp(6)
  updated    DateTime  @default(dbgenerated("LOCALTIMESTAMP")) @db.Timestamp(6)
  deleted    DateTime? @db.Timestamp(6)
  compute_id String?   @db.Uuid
}

model User {
  id                   String                    @id @default(cuid())
  email                String                    @unique
  password             String
  role                 String                    @default("USER")
  businessName         String
  vatNumber            String?
  firstName            String?
  lastName             String?
  phone                String?
  address              String?
  emailVerified        DateTime?
  lastLoginAt          DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  aiAnalytics          AIProcessingAnalytics[]
  businessPatterns     BusinessLearningPattern[]
  documentFolders      DocumentFolder[]
  learningFeedbacks    LearningFeedback[]
  templateUsages       TemplateUsage[]
  auditLogs            AuditLog[]
  chatSessions         ChatSession[]
  documents            Document[]
  payments             Payment[]
  vatReturns           VATReturn[]
  videoAnalytics       VideoAnalytics[]

  @@map("vat_users")
}

model VATReturn {
  id               String     @id @default(cuid())
  userId           String
  periodStart      DateTime
  periodEnd        DateTime
  dueDate          DateTime
  salesVAT         Decimal
  purchaseVAT      Decimal
  netVAT           Decimal
  status           String     @default("DRAFT")
  submittedAt      DateTime?
  paidAt           DateTime?
  revenueRefNumber String?
  revenueResponse  Json?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  documents        Document[]
  payment          Payment?
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vat_returns")
}

model Document {
  id                        String                  @id @default(cuid())
  userId                    String
  vatReturnId               String?
  fileName                  String
  originalName              String
  filePath                  String?
  fileSize                  Int
  mimeType                  String
  fileHash                  String
  documentType              String
  category                  String
  isScanned                 Boolean                 @default(false)
  scanResult                String?
  uploadedAt                DateTime                @default(now())
  fileData                  String?
  complianceIssues          String[]
  dateExtractionConfidence  Float?
  documentHash              String?
  duplicateOfId             String?
  extractedDate             DateTime?
  extractedMonth            Int?
  extractedYear             Int?
  extractionConfidence      Float?
  invoiceTotal              Decimal?
  isDuplicate               Boolean                 @default(false)
  processingQuality         Int?
  totalExtractionConfidence Float?
  validationStatus          String                  @default("PENDING")
  vatAccuracy               Float?
  aiAnalytics               AIProcessingAnalytics[]
  fingerprint               DocumentFingerprint?
  learningFeedbacks         LearningFeedback[]
  templateUsages            TemplateUsage[]
  folder                    DocumentFolder?         @relation(fields: [userId, extractedYear, extractedMonth], references: [userId, year, month])
  user                      User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  vatReturn                 VATReturn?              @relation(fields: [vatReturnId], references: [id])

  @@map("vat_documents")
}

model DocumentFolder {
  id                       String     @id @default(cuid())
  userId                   String
  year                     Int
  month                    Int
  totalSalesAmount         Decimal    @default(0)
  totalPurchaseAmount      Decimal    @default(0)
  totalSalesVAT            Decimal    @default(0)
  totalPurchaseVAT         Decimal    @default(0)
  totalNetVAT              Decimal    @default(0)
  documentCount            Int        @default(0)
  salesDocumentCount       Int        @default(0)
  purchaseDocumentCount    Int        @default(0)
  averageProcessingQuality Int?
  averageVATAccuracy       Float?
  isComplete               Boolean    @default(false)
  needsReview              Boolean    @default(false)
  complianceStatus         String     @default("PENDING")
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
  lastDocumentAt           DateTime?
  user                     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents                Document[]

  @@unique([userId, year, month])
  @@map("document_folders")
}

model Payment {
  id                 String    @id @default(cuid())
  userId             String
  vatReturnId        String    @unique
  amount             Decimal
  currency           String    @default("EUR")
  status             String    @default("PENDING")
  paymentMethod      String?
  stripePaymentId    String?
  stripeClientSecret String?
  processedAt        DateTime?
  failedAt           DateTime?
  failureReason      String?
  receiptNumber      String?   @unique
  receiptUrl         String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vatReturn          VATReturn @relation(fields: [vatReturnId], references: [id], onDelete: Cascade)

  @@map("vat_payments")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  entityType String?
  entityId   String?
  ipAddress  String?
  userAgent  String?
  metadata   Json?
  oldValues  Json?
  newValues  Json?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@map("vat_audit_logs")
}

model ChatSession {
  id            String        @id @default(cuid())
  userId        String?
  sessionId     String        @unique
  isActive      Boolean       @default(true)
  isResolved    Boolean       @default(false)
  resolvedAt    DateTime?
  resolvedBy    String?
  userEmail     String?
  userName      String?
  userCompany   String?
  ipAddress     String?
  userAgent     String?
  referrerUrl   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  lastMessageAt DateTime      @default(now())
  messages      ChatMessage[]
  user          User?         @relation(fields: [userId], references: [id])

  @@map("vat_chat_sessions")
}

model ChatMessage {
  id             String      @id @default(cuid())
  sessionId      String
  message        String
  messageType    String      @default("text")
  senderType     String
  senderId       String?
  senderName     String?
  isRead         Boolean     @default(false)
  readAt         DateTime?
  fileName       String?
  fileUrl        String?
  fileSize       Int?
  createdAt      DateTime    @default(now())
  downloadCount  Int         @default(0)
  expiresAt      DateTime?
  fileHash       String?
  filePreviewUrl String?
  isActive       Boolean     @default(true)
  isScanned      Boolean     @default(false)
  mimeType       String?
  originalName   String?
  scanDetails    String?
  scanResult     String?
  session        ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("vat_chat_messages")
}

model DemoVideo {
  id              String           @id @default(cuid())
  title           String
  description     String?
  fileName        String
  originalName    String
  fileSize        Int
  mimeType        String
  duration        Int?
  videoUrl        String
  thumbnailUrl    String?
  fileHash        String
  videoUrlHD      String?
  videoUrlMD      String?
  videoUrlSD      String?
  status          String           @default("PROCESSING")
  isActive        Boolean          @default(true)
  processingError String?
  width           Int?
  height          Int?
  aspectRatio     String?
  bitrate         Int?
  codec           String?
  uploadedBy      String
  uploadedAt      DateTime         @default(now())
  lastModified    DateTime         @updatedAt
  analytics       VideoAnalytics[]

  @@map("demo_videos")
}

model VideoAnalytics {
  id              String    @id @default(cuid())
  videoId         String
  sessionId       String?
  userId          String?
  ipAddress       String?
  userAgent       String?
  country         String?
  city            String?
  timezone        String?
  deviceType      String?
  browserName     String?
  osName          String?
  screenSize      String?
  playCount       Int       @default(1)
  watchDuration   Int       @default(0)
  completionRate  Float     @default(0)
  referrerUrl     String?
  pageUrl         String?
  isFirstView     Boolean   @default(true)
  selectedQuality String?
  bufferEvents    Int       @default(0)
  loadTime        Int?
  firstViewAt     DateTime  @default(now())
  lastViewAt      DateTime  @updatedAt
  user            User?     @relation(fields: [userId], references: [id])
  video           DemoVideo @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("video_analytics")
}

model DocumentFingerprint {
  id                 String             @id @default(cuid())
  documentId         String             @unique
  structuralHash     String
  textPatterns       String[]
  vatPatterns        Json
  businessSignatures String[]
  layoutFeatures     Json
  confidence         Float              @default(0.8)
  successRate        Float              @default(0.0)
  usageCount         Int                @default(0)
  createdAt          DateTime           @default(now())
  lastUsed           DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  document           Document           @relation(fields: [documentId], references: [id], onDelete: Cascade)
  templates          DocumentTemplate[]
  feedbacks          LearningFeedback[]

  @@map("document_fingerprints")
}

model DocumentTemplate {
  id                    String              @id @default(cuid())
  name                  String
  businessName          String?
  templateType          String
  category              String
  fingerprintId         String
  extractionRules       Json
  validationRules       Json
  confidence            Float               @default(0.8)
  usageCount            Int                 @default(0)
  successRate           Float               @default(1.0)
  averageProcessingTime Int                 @default(5000)
  averageConfidence     Float               @default(0.8)
  createdFromDocuments  String[]
  errorPatterns         Json
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  lastUsed              DateTime            @default(now())
  lastUpdated           DateTime            @updatedAt
  fingerprint           DocumentFingerprint @relation(fields: [fingerprintId], references: [id])
  feedbacks             LearningFeedback[]
  usageHistory          TemplateUsage[]

  @@map("document_templates")
}

model TemplateUsage {
  id              String           @id @default(cuid())
  templateId      String
  documentId      String
  userId          String?
  processingTime  Int
  confidence      Float
  wasAccurate     Boolean?
  similarity      Float
  matchedFeatures String[]
  extractedData   Json
  correctedData   Json?
  createdAt       DateTime         @default(now())
  feedbackAt      DateTime?
  document        Document         @relation(fields: [documentId], references: [id], onDelete: Cascade)
  template        DocumentTemplate @relation(fields: [templateId], references: [id])
  user            User?            @relation(fields: [userId], references: [id])

  @@map("template_usage")
}

model LearningFeedback {
  id                  String               @id @default(cuid())
  documentId          String
  fingerprintId       String?
  templateId          String?
  userId              String
  originalExtraction  Json
  correctedExtraction Json
  feedback            String
  corrections         Json
  confidenceScore     Float?
  processingTime      Int?
  notes               String?
  wasProcessed        Boolean              @default(false)
  processedAt         DateTime?
  improvementMade     Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  document            Document             @relation(fields: [documentId], references: [id], onDelete: Cascade)
  fingerprint         DocumentFingerprint? @relation(fields: [fingerprintId], references: [id])
  template            DocumentTemplate?    @relation(fields: [templateId], references: [id])
  user                User                 @relation(fields: [userId], references: [id])

  @@map("learning_feedback")
}

model AIProcessingAnalytics {
  id                    String    @id @default(cuid())
  documentId            String
  userId                String?
  processingStrategy    String
  templateUsed          String?
  processingTime        Int
  confidenceScore       Float
  tokensUsed            Int?
  cost                  Float?
  extractionAccuracy    Float?
  userSatisfaction      Int?
  learningApplied       Boolean   @default(false)
  confidenceBoost       Float     @default(0.0)
  matchedFeatures       String[]
  suggestedImprovements String[]
  hadErrors             Boolean   @default(false)
  errorType             String?
  errorMessage          String?
  processedAt           DateTime  @default(now())
  feedbackAt            DateTime?
  document              Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user                  User?     @relation(fields: [userId], references: [id])

  @@map("ai_processing_analytics")
}

model BusinessLearningPattern {
  id            String    @id @default(cuid())
  userId        String?
  businessName  String?
  patternType   String
  patternData   Json
  frequency     Int       @default(1)
  confidence    Float     @default(0.5)
  documentTypes String[]
  categories    String[]
  successRate   Float     @default(0.0)
  lastValidated DateTime?
  firstSeen     DateTime  @default(now())
  lastSeen      DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User?     @relation(fields: [userId], references: [id])

  @@map("business_learning_patterns")
}

model ContactSubmission {
  id           String   @id @default(cuid())
  fullName     String
  email        String
  phone        String
  companyName  String?
  subject      String
  message      String
  businessType String?
  currentStage String?
  source       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("contact_submissions")
}
